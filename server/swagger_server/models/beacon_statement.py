# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.beacon_statement_object import BeaconStatementObject  # noqa: F401,E501
from swagger_server.models.beacon_statement_predicate import BeaconStatementPredicate  # noqa: F401,E501
from swagger_server.models.beacon_statement_subject import BeaconStatementSubject  # noqa: F401,E501
from swagger_server import util


class BeaconStatement(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, source: str=None, id: str=None, subject: BeaconStatementSubject=None, predicate: BeaconStatementPredicate=None, object: BeaconStatementObject=None):  # noqa: E501
        """BeaconStatement - a model defined in Swagger

        :param source: The source of this BeaconStatement.  # noqa: E501
        :type source: str
        :param id: The id of this BeaconStatement.  # noqa: E501
        :type id: str
        :param subject: The subject of this BeaconStatement.  # noqa: E501
        :type subject: BeaconStatementSubject
        :param predicate: The predicate of this BeaconStatement.  # noqa: E501
        :type predicate: BeaconStatementPredicate
        :param object: The object of this BeaconStatement.  # noqa: E501
        :type object: BeaconStatementObject
        """
        self.swagger_types = {
            'source': str,
            'id': str,
            'subject': BeaconStatementSubject,
            'predicate': BeaconStatementPredicate,
            'object': BeaconStatementObject
        }

        self.attribute_map = {
            'source': 'source',
            'id': 'id',
            'subject': 'subject',
            'predicate': 'predicate',
            'object': 'object'
        }

        self._source = source
        self._id = id
        self._subject = subject
        self._predicate = predicate
        self._object = object

    @classmethod
    def from_dict(cls, dikt) -> 'BeaconStatement':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BeaconStatement of this BeaconStatement.  # noqa: E501
        :rtype: BeaconStatement
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source(self) -> str:
        """Gets the source of this BeaconStatement.

        The URI endpoint or knowledge source that this statement was taken from. This is useful for beacon instances that report data from multiple sources.  # noqa: E501

        :return: The source of this BeaconStatement.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source: str):
        """Sets the source of this BeaconStatement.

        The URI endpoint or knowledge source that this statement was taken from. This is useful for beacon instances that report data from multiple sources.  # noqa: E501

        :param source: The source of this BeaconStatement.
        :type source: str
        """

        self._source = source

    @property
    def id(self) -> str:
        """Gets the id of this BeaconStatement.

        CURIE-encoded identifier for statement (can be used to retrieve associated evidence)  # noqa: E501

        :return: The id of this BeaconStatement.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this BeaconStatement.

        CURIE-encoded identifier for statement (can be used to retrieve associated evidence)  # noqa: E501

        :param id: The id of this BeaconStatement.
        :type id: str
        """

        self._id = id

    @property
    def subject(self) -> BeaconStatementSubject:
        """Gets the subject of this BeaconStatement.


        :return: The subject of this BeaconStatement.
        :rtype: BeaconStatementSubject
        """
        return self._subject

    @subject.setter
    def subject(self, subject: BeaconStatementSubject):
        """Sets the subject of this BeaconStatement.


        :param subject: The subject of this BeaconStatement.
        :type subject: BeaconStatementSubject
        """

        self._subject = subject

    @property
    def predicate(self) -> BeaconStatementPredicate:
        """Gets the predicate of this BeaconStatement.


        :return: The predicate of this BeaconStatement.
        :rtype: BeaconStatementPredicate
        """
        return self._predicate

    @predicate.setter
    def predicate(self, predicate: BeaconStatementPredicate):
        """Sets the predicate of this BeaconStatement.


        :param predicate: The predicate of this BeaconStatement.
        :type predicate: BeaconStatementPredicate
        """

        self._predicate = predicate

    @property
    def object(self) -> BeaconStatementObject:
        """Gets the object of this BeaconStatement.


        :return: The object of this BeaconStatement.
        :rtype: BeaconStatementObject
        """
        return self._object

    @object.setter
    def object(self, object: BeaconStatementObject):
        """Sets the object of this BeaconStatement.


        :param object: The object of this BeaconStatement.
        :type object: BeaconStatementObject
        """

        self._object = object
